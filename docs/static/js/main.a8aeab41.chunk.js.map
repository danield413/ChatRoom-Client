{"version":3,"sources":["types/types.js","actions/auth.js","actions/dashboard.js","components/dashboard/Online.js","components/dashboard/All.js","actions/stats.js","components/dashboard/Aside.js","components/dashboard/AsideResponsive.js","components/dashboard/MessageReceived.js","components/dashboard/MessageSent.js","components/dashboard/ModalInfo.js","components/dashboard/Chat.js","components/dashboard/PrivateChat.js","context/SocketProvider.js","components/dashboard/DashboardScreen.js","components/statistics/StatisticsScreen.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","router/AuthRouter.js","router/PrivateRoute.js","router/PublicRoute.js","router/AppRouter.js","reducers/authReducer.js","reducers/dashboardReducer.js","reducers/statsReducer.js","store/store.js","App.js","index.js"],"names":["types","login","data","type","payload","newUser","checkingFinish","logout","addMessages","addChatMessages","selectUser","openSidebar","closeSidebar","cleanDashboard","Online","dispatch","useDispatch","uid","useSelector","state","auth","selectedUser","dashboard","users","className","onClick","name","color","size","map","user","id","All","allUsers","cleanStats","Aside","useState","setState","userLeaves","useCallback","find","useEffect","DropdownButton","title","variant","Dropdown","ItemText","Item","as","localStorage","removeItem","to","ButtonGroup","aria-label","AsideResponsive","motion","button","whileTap","scale","fill","MessageReceived","text","date","div","animate","navigator","clipboard","writeText","then","Swal","fire","MessageSent","ModalInfo","show","handleClose","participants","Modal","onHide","backdrop","keyboard","Header","Title","Body","src","alt","Footer","Chat","sendMessage","showMenuButton","setShow","textRef","useRef","messages","setRef","node","scrollIntoView","behavior","length","Spinner","animation","role","message","index","lastMessage","_id","ref","onSubmit","e","preventDefault","current","value","placeholder","autoComplete","propType","PropTypes","func","isRequired","PrivateChat","sendPrivateMessage","loading","setLoading","chatMessages","axios","get","process","headers","getItem","messagesChat","catch","err","recipient","SocketContext","React","createContext","SocketProvider","children","socket","setSocket","now","Date","moment","format","emit","newSocket","io","query","close","on","off","addUsers","addAllUsers","setStats","values","Provider","DashboardScreen","window","screen","width","setWidth","showSidebar","useContext","windowResize","target","innerWidth","addEventListener","removeEventListener","Helmet","content","StatisticsScreen","countMessages","stats","Container","fluid","Row","Col","md","ResponsiveContainer","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","LoginScreen","formik","useFormik","initialValues","email","password","validationSchema","Yup","required","min","a","post","ok","setItem","token","msg","startLogin","charSet","Form","handleSubmit","Group","Control","onChange","handleChange","onBlur","handleBlur","isInvalid","errors","Button","RegisterScreen","position","icon","showConfirmButton","timer","startRegister","AuthRouter","path","component","PrivateRoute","isAuthenticated","Component","rest","props","PublicRoute","AppRouter","checking","exact","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8aeab41.chunk.js","sourcesContent":["export const types = {\r\n    authCheckingJWTFinish: \"AUTH checking JWT finish\",\r\n    authLogin: \"AUTH login\",\r\n    authLogout: \"AUTH logout\",\r\n    newUser: \"AUTH new user\",\r\n\r\n    addMessages: \"DASHBOARD add messages\",\r\n    addChatMessages: \"DASHBOARD add chat messages\",\r\n    addUsers: \"DASHBOARD add users\",\r\n    cleanDashboard: \"DASHBOARD clean\",\r\n    selectUser: \"DASHBOARD select user\",\r\n    addAllUsers: \"DASHBOARD add all registered users\",\r\n    openSidebar: \"DASHBOARD open sidebar\",\r\n    closeSidebar: \"DASHBOARD close sidebar\",\r\n    \r\n    loadStats: \"STATS load stats\",\r\n    cleanStats: \"STATS clean stats\",\r\n}","import axios from \"axios\";\r\nimport Swal from 'sweetalert2'\r\nimport { types } from \"../types/types\";\r\n\r\nexport const startLogin = ( email, password ) => {\r\n    return async(dispatch) => {\r\n\r\n        const { data } = await axios.post(`${process.env.REACT_APP_API_URL}/auth/login`, {\r\n            email, password\r\n        })\r\n\r\n        if(data.ok){\r\n            localStorage.setItem('chat-token', data.token);\r\n\r\n            dispatch( login({\r\n                uid: data.user.uid,\r\n                name: data.user.name,\r\n                email: data.user.email\r\n            }))\r\n        } else {\r\n            Swal.fire('Error', data.msg, 'error');\r\n        }\r\n    }\r\n}\r\n\r\nconst login = ( data ) => ({\r\n    type: types.authLogin,\r\n    payload: data\r\n});\r\n\r\nexport const startRegister = ( name, email, password ) => {\r\n    return async(dispatch) => {\r\n        const { data } = await axios.post(`${process.env.REACT_APP_API_URL}/auth/register`, {\r\n            name, email, password\r\n        });\r\n \r\n        if(data.ok) {\r\n            localStorage.setItem('chat-token', data.token);\r\n            \r\n            dispatch( newUser() );\r\n\r\n            dispatch( login({\r\n                uid: data.user.uid,\r\n                name: data.user.name,\r\n                email: data.user.email\r\n            }));\r\n\r\n            Swal.fire({\r\n                position: 'bottom-end',\r\n                icon: 'success',\r\n                title: 'Cuenta creada',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            })\r\n        } else {\r\n            Swal.fire('Error', data.msg, 'error')\r\n        } \r\n\r\n    }\r\n}\r\n\r\nexport const startChecking = () => {\r\n    return async(dispatch) => {\r\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/auth/renew`,{\r\n            headers: {\r\n                'x-token': localStorage.getItem('chat-token'),\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        if(data.ok) {\r\n            localStorage.setItem('chat-token', data.token);\r\n\r\n            dispatch( login({\r\n                uid: data.user.uid,\r\n                name: data.user.name,\r\n                email: data.user.email\r\n            }))\r\n        } else {\r\n            dispatch( checkingFinish() )\r\n        }\r\n    }\r\n}\r\n\r\nconst newUser = () => ({ type: types.newUser })\r\n\r\nconst checkingFinish = () => ({ type: types.authCheckingJWTFinish })\r\n\r\nexport const logout = () => ({type: types.authLogout})\r\n","import { types } from \"../types/types\";\r\n\r\n\r\nexport const addMessages = ( payload ) => ({\r\n    type: types.addMessages,\r\n    payload\r\n})\r\n\r\nexport const addChatMessages = (payload) => ({\r\n    type: types.addChatMessages,\r\n    payload\r\n})\r\n\r\nexport const addUsers = ( payload ) => ({\r\n    type: types.addUsers,\r\n    payload\r\n})\r\n\r\nexport const selectUser = ( payload ) => ({\r\n    type: types.selectUser,\r\n    payload\r\n})\r\n\r\nexport const addAllUsers = ( payload ) => ({\r\n    type: types.addAllUsers,\r\n    payload\r\n})\r\n\r\nexport const openSidebar = () => ({ type: types.openSidebar })\r\nexport const closeSidebar = () => ({ type: types.closeSidebar })\r\n\r\nexport const cleanDashboard = () => ({ type: types.cleanDashboard })","import React from 'react'\r\nimport { FaUserCircle } from 'react-icons/fa';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { closeSidebar, selectUser } from '../../actions/dashboard';\r\n\r\nexport const Online = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { uid } = useSelector(state => state.auth);\r\n    const { selectedUser } = useSelector(state => state.dashboard);\r\n    const { users } = useSelector(state => state.dashboard);\r\n\r\n    return (\r\n        <>\r\n            <h6 className=\"lead ms-4 my-3 \"><strong className=\"text-light text-resp\">Conectados</strong></h6>\r\n                <button \r\n                    onClick={ () => {\r\n                        dispatch( selectUser({}) )\r\n                        dispatch( closeSidebar() )\r\n                    }}\r\n                    className={`text-white w-100 text-start animate__animated animate animate__fadeIn user-sidebar ${!selectedUser?.name && !selectedUser?.uid ? 'user-sidebar-active' : ''}`} \r\n                >\r\n                    <FaUserCircle color=\"#fff\" size=\"26px\" className=\"ms-3 mr-10\"/>\r\n                    <span className=\"fw-bold text-resp\">Chat general <i className=\"fas fa-circle mx-2 fz-12px text-online\" ></i></span>\r\n                </button>\r\n                <div className=\"w-100 overflow-auto online-height\">\r\n                    {users &&\r\n                        users.map(user => (\r\n                            (user?.id !== uid) &&\r\n                                <button \r\n                                    key={user.id} \r\n                                    onClick={ () => {\r\n                                        dispatch( selectUser({ uid: user?.id, name: user?.name }) )\r\n                                        dispatch( closeSidebar() )\r\n                                    } }\r\n                                    className={`text-resp text-white w-100 text-start animate__animated animate animate__fadeIn user-sidebar ${user.id === selectedUser?.uid ? 'user-sidebar-active' : ''}`} \r\n                                >\r\n                                    <FaUserCircle color=\"#fff\" size=\"26px\" className=\"ms-3 mr-10\"/>\r\n                                    <span className=\"fw-bold text-resp\">{user.name} <i className=\"fas fa-circle mx-2 fz-12px text-online\"></i></span>\r\n                                </button>\r\n                        ))\r\n                    }\r\n                </div>\r\n                    \r\n        </>\r\n    )\r\n}\r\n ","import React from 'react'\r\nimport { FaUserCircle } from 'react-icons/fa'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const All = () => {\r\n\r\n    const { allUsers } = useSelector(state => state.dashboard);\r\n    const { uid } = useSelector(state => state.auth);\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"lead ms-4 my-3\"><strong className=\"text-light text-resp\">Todos</strong></h5>\r\n            <div className=\"w-100 overflow-auto all-height\">\r\n            {allUsers &&\r\n                allUsers.map(user => (\r\n                    (user?.id !== uid) &&\r\n                        <button \r\n                            key={user.uid} \r\n                            className=\"text-white w-100 text-start animate__animated animate animate__fadeIn user-sidebar\" \r\n                        >\r\n                            <FaUserCircle color=\"#fff\" size=\"26px\" className=\"ms-3 mr-10\"/>\r\n                            <span className=\"fw-bold\">{user.name}</span>\r\n                        </button>\r\n                ))\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\nexport const setStats = (payload) => ({\r\n    type: types.loadStats,\r\n    payload\r\n})\r\n\r\nexport const cleanStats = () => ({ type: types.cleanStats })","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { ButtonGroup, Dropdown, DropdownButton } from 'react-bootstrap'\r\nimport { FaUserCircle } from 'react-icons/fa'\r\nimport { AiTwotoneSetting } from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../../actions/auth'\r\nimport { cleanDashboard, selectUser } from '../../actions/dashboard';\r\nimport { Online } from './Online';\r\nimport { All } from './All';\r\nimport { Link } from 'react-router-dom';\r\nimport { IoIosStats } from 'react-icons/io';\r\nimport { cleanStats } from '../../actions/stats';\r\n\r\nexport const Aside = () => {\r\n\r\n    const [state, setState] = useState('online')\r\n    const dispatch = useDispatch();\r\n    const { uid, name } = useSelector(state => state.auth);\r\n    const { users } = useSelector(state => state.dashboard);\r\n    const { selectedUser } = useSelector(state => state.dashboard);\r\n\r\n    const userLeaves = useCallback(() => {\r\n        const u = users.find( user => user.id === selectedUser?.uid );\r\n        if(!u) {\r\n            dispatch( selectUser({}) )\r\n        }\r\n    }, [users, selectedUser?.uid, dispatch])\r\n\r\n    useEffect(() => {\r\n       userLeaves()\r\n    }, [users, userLeaves])\r\n    \r\n    const handleLogout = () => {\r\n        dispatch( logout() );\r\n        dispatch( cleanDashboard() );\r\n        dispatch( cleanStats() );\r\n        localStorage.removeItem('chat-token');\r\n    }\r\n\r\n    return (\r\n        <aside className=\"h-100\">\r\n            <header>\r\n                <div className=\"w-100 bg-dark d-flex justify-content-between align-items-center px-2 header-height\">\r\n                    <div>\r\n                        <FaUserCircle color=\"#fff\" size=\"26px\" className=\"ms-3 mr-10\"/>\r\n                        <span className=\"fw-bold text-white\">{name}</span>\r\n                    </div>\r\n                    \r\n                    <DropdownButton title={<AiTwotoneSetting />} id=\"dropdown-item-button\" variant=\"dark\" className=\"bg-dark d-inline\">\r\n                        <Dropdown.ItemText className=\"bg-secondary text-light\">\r\n                            <strong>Opciones</strong>\r\n                        </Dropdown.ItemText>\r\n                        <Dropdown.Item as=\"button\" onClick={handleLogout} className=\"bg-secondary text-light\">\r\n                            Salir\r\n                        </Dropdown.Item>\r\n                    </DropdownButton>\r\n                        \r\n                </div>\r\n            </header>\r\n            <p className=\"text-muted text-center mt-2\">{uid}</p>\r\n            <div className=\"w-100 d-flex justify-content-center mb-3\">\r\n                <Link to=\"/stats\" className=\"btn btn-outline-info d-flex align-items-center \"><IoIosStats className=\"me-1\"/>Estadísticas</Link>\r\n            </div>\r\n            <div>\r\n                <ButtonGroup aria-label=\"selección\" className=\"w-100\">\r\n                    <button \r\n                        onClick={ () => setState('online')} \r\n                        className={`button-group w-50 text-resp ${state === 'online' && 'button-group-active'} fw-bold text-white`}\r\n                    >\r\n                        Conectados\r\n                    </button>\r\n                    <button \r\n                        onClick={ () => setState('all')} \r\n                        className={`button-group w-50 text-resp ${state === 'all' && 'button-group-active'} fw-bold text-white` }\r\n                    >\r\n                        Todos\r\n                    </button>\r\n                </ButtonGroup>\r\n                {( state === 'online' ) \r\n                ? <Online />\r\n                : <All />\r\n                }\r\n            </div>\r\n        </aside>\r\n    )\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { ButtonGroup, Dropdown, DropdownButton } from 'react-bootstrap'\r\nimport { FaUserCircle } from 'react-icons/fa'\r\nimport { AiTwotoneSetting } from 'react-icons/ai'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../../actions/auth'\r\nimport { cleanDashboard, closeSidebar, selectUser } from '../../actions/dashboard';\r\nimport { Online } from './Online';\r\nimport { All } from './All';\r\nimport { Link } from 'react-router-dom';\r\nimport { IoIosStats } from 'react-icons/io';\r\nimport { cleanStats } from '../../actions/stats';\r\nimport { VscChromeClose } from 'react-icons/vsc';\r\nimport { motion } from 'framer-motion';\r\n\r\nexport const AsideResponsive = () => {\r\n\r\n    const [state, setState] = useState('online')\r\n    const dispatch = useDispatch();\r\n    const { uid, name } = useSelector(state => state.auth);\r\n    const { users } = useSelector(state => state.dashboard);\r\n    const { selectedUser } = useSelector(state => state.dashboard);\r\n\r\n    const userLeaves = useCallback(() => {\r\n        const u = users.find( user => user.id === selectedUser?.uid );\r\n        if(!u) {\r\n            dispatch( selectUser({}) )\r\n        }\r\n    }, [users, selectedUser?.uid, dispatch])\r\n\r\n    useEffect(() => {\r\n       userLeaves()\r\n    }, [users, userLeaves])\r\n    \r\n    const handleLogout = () => {\r\n        dispatch( logout() );\r\n        dispatch( cleanDashboard() );\r\n        dispatch( cleanStats() );\r\n        localStorage.removeItem('chat-token');\r\n    }\r\n\r\n    return (\r\n        <aside className=\"h-100\">\r\n            <header>\r\n                <div className=\"w-100 bg-dark d-flex justify-content-between align-items-center px-2 header-height\">\r\n                    <div>\r\n                        <FaUserCircle color=\"#fff\" size=\"26px\" className=\"ms-3 mr-10\"/>\r\n                        <span className=\"fw-bold text-white text-resp\">{name}</span>\r\n                    </div>\r\n                    <div>\r\n                        <DropdownButton title={<AiTwotoneSetting />} id=\"dropdown-item-button\" variant=\"dark\" className=\"bg-dark d-inline\">\r\n                            <Dropdown.ItemText className=\"bg-secondary text-light text-resp\">\r\n                                <strong>Opciones</strong>\r\n                            </Dropdown.ItemText>\r\n                            <Dropdown.Item as=\"button\" onClick={handleLogout} className=\"bg-secondary text-light text-resp\">\r\n                                Salir\r\n                            </Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <motion.button \r\n                            onClick={() => dispatch( closeSidebar() ) }\r\n                            whileTap={{ scale: 1.4 }}\r\n                            className=\"sidebar-close\"\r\n                        >\r\n                            <VscChromeClose fill=\"#fff\" size=\"1.4rem\"/>\r\n                        </motion.button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <p className=\"text-muted text-center mt-2\">{uid}</p>\r\n            <div className=\"w-100 d-flex justify-content-center mb-3\">\r\n                <Link to=\"/stats\" className=\"btn btn-outline-info d-flex align-items-center text-\"><IoIosStats className=\"me-1\"/>Estadísticas</Link>\r\n            </div>\r\n            <div>\r\n                <ButtonGroup aria-label=\"selección\" className=\"w-100\">\r\n                    <button \r\n                        onClick={ () => setState('online')} \r\n                        className={`text-resp button-group w-50 ${state === 'online' && 'button-group-active'} fw-bold text-white`}\r\n                    >\r\n                        Conectados\r\n                    </button>\r\n                    <button \r\n                        onClick={ () => setState('all')} \r\n                        className={`text-resp button-group w-50 ${state === 'all' && 'button-group-active'} fw-bold text-white` }\r\n                    >\r\n                        Todos\r\n                    </button>\r\n                </ButtonGroup>\r\n                {( state === 'online' ) \r\n                ? <Online />\r\n                : <All />\r\n                }\r\n            </div>\r\n        </aside>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { motion } from 'framer-motion';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const MessageReceived = ({text, name, date}) => {\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText( text ).then(() => {\r\n            Swal.fire('Mensaje copiado')\r\n        })\r\n    }\r\n\r\n    return (\r\n        <motion.div \r\n            animate={{\r\n                scale: [1, 1.1, 1]\r\n            }}\r\n            className=\"text-msg-res px-3 py-1 d-flex flex-column rounded text-white mb-3 animate__animated animate__fadeIn message-received\" \r\n        >\r\n            {name && \r\n            <div className=\"text-msg-res fw-bold d-flex justify-content-between align-items-center\" >\r\n                {name}\r\n                <DropdownButton title=\"\" size=\"sm\" id=\"dropdown-item-button\">\r\n                    <Dropdown.Item as=\"button\" onClick={handleCopy} className=\"bg-secondary text-light text-msg-res\">\r\n                        Copiar texto\r\n                    </Dropdown.Item>\r\n                </DropdownButton>\r\n            </div>}\r\n            \r\n            {text}\r\n            <span className=\"text-date d-block text-muted align-self-end\">{date}</span>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nMessageReceived.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    name: PropTypes.string,\r\n    date: PropTypes.string.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { motion } from 'framer-motion';\r\n\r\nexport const MessageSent = ({text, date}) => {\r\n\r\n    return (\r\n        <motion.div \r\n            animate={{\r\n                scale: [1, 1.1, 1]\r\n            }}\r\n            className=\"text-msg-res px-3 py-1 d-flex flex-column rounded text-white mb-3 animate__animated animate__fadeIn message-sent\" \r\n        >\r\n            {text}\r\n            <span className=\"text-date d-block text-light align-self-end fz-12px\">{date}</span>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nMessageSent.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired\r\n}","import { motion } from 'framer-motion';\r\nimport React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { GrClose } from 'react-icons/gr';\r\n\r\nexport const ModalInfo = ({show, handleClose, participants}) => {\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title>Información</Modal.Title>\r\n                <motion.button \r\n                    onClick={handleClose}\r\n                    className=\"btn\"\r\n                    whileTap={{scale: 1.4}}\r\n                >\r\n                    <GrClose />\r\n                </motion.button>\r\n            </Modal.Header>\r\n            <Modal.Body >\r\n                <h4 className=\"fw-bold text-center\">Participantes</h4>\r\n                {\r\n                !participants \r\n                ?<div className=\"w-100\">\r\n                    <div className=\"alert alert-info text-center text-resp\">\r\n                    Todos los usuarios registrados en <strong>ChatRoom</strong>\r\n                    </div>\r\n                    <img src=\"./assets/chatting-group.svg\" alt=\"chatting-group\" className=\"svg\"/>\r\n                </div>\r\n                : <div className=\"w-100\">\r\n                    <div className=\"alert alert-success text-center\">\r\n                        <strong>{participants[0]} - {participants[1]}</strong>\r\n                    </div>\r\n                    <img src=\"./assets/chatting.svg\" alt=\"chatting\" className=\"svg\"/>\r\n                </div>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useCallback, useRef, useState } from 'react'\r\nimport { IoIosInformationCircle, IoMdSend } from 'react-icons/io'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { MessageReceived } from '../dashboard/MessageReceived';\r\nimport { MessageSent } from '../dashboard/MessageSent';\r\nimport { motion } from 'framer-motion';\r\nimport { ModalInfo } from './ModalInfo';\r\nimport { AiOutlineMenu } from 'react-icons/ai';\r\nimport { openSidebar } from '../../actions/dashboard';\r\n\r\nexport const Chat = ({ sendMessage, showMenuButton }) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const textRef = useRef();\r\n    const { messages } = useSelector(state => state.dashboard);\r\n    const { uid } = useSelector(state => state.auth);\r\n    \r\n    const setRef = useCallback( node => {\r\n        if( node ) {\r\n            node.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [])\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(textRef.current.value === ''){\r\n            textRef.current.value = '';\r\n        } else {\r\n            sendMessage(textRef.current.value);\r\n            textRef.current.value = '';\r\n        }\r\n    }\r\n\r\n    const handleOpen = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    return (\r\n        <>\r\n        <div className=\"chat w-100\">\r\n            <div className=\"d-flex align-items-center justify-content-between bg-head-chat\">\r\n                <div>\r\n                    <img src=\"./assets/img1.jpg\" alt=\"Foto de perfil de grupo\" id=\"img-chat\" className=\"ms-3\"/>\r\n                    <span className=\"text-white fw-bold ms-3 text-resp\">Chat general</span>\r\n                </div>\r\n                <div>\r\n                    <motion.button \r\n                        onClick={handleOpen}\r\n                        whileTap={ {scale: 2.5} }\r\n                        className=\"button-info mr-1rem\"\r\n                    >\r\n                        <IoIosInformationCircle />\r\n                    </motion.button>\r\n\r\n                    {showMenuButton && \r\n                    <motion.button\r\n                        onClick={() => dispatch( openSidebar() )}\r\n                        whileTap={ {scale: 2.5} }\r\n                        className=\"button-info mr-1rem\"\r\n                    >\r\n                        <AiOutlineMenu />\r\n                    </motion.button>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"overflow-auto pt-4 bg-chat chat-container\">\r\n                {(messages.length === 0) && \r\n                    <div className=\"alert alert-warning text-center mx-5 text-resp\">Todavía no hay mensajes, comienza escribiendo uno.</div>\r\n                }\r\n                {(messages.length === 0) &&\r\n                    <div className=\"w-100 d-flex justify-content-center\">\r\n                        <Spinner animation=\"border\" role=\"status\" variant=\"primary\" />\r\n                    </div>\r\n                }\r\n                {messages &&\r\n                    messages.map((message, index) => {\r\n                        const lastMessage = messages.length - 1 === index;\r\n                        if(message.user._id === uid){\r\n                            return <div key={index} className=\"d-flex w-100 align-items-end flex-column\" ref={lastMessage ? setRef : null}>   \r\n                                <MessageSent \r\n                                    key={index} \r\n                                    text={message.message}\r\n                                    date={message.date}\r\n                                />\r\n                            </div>\r\n                        } else {\r\n                            return <div key={index} className=\"d-flex w-100 align-items-start flex-column\" ref={lastMessage ? setRef : null}>\r\n                                <MessageReceived \r\n                                    key={index} \r\n                                    text={message.message} \r\n                                    name={message.user.name}\r\n                                    date={message.date}\r\n                                />\r\n                            </div>\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n           \r\n            <div id=\"chat-input\">\r\n                <form onSubmit={handleSubmit} className=\"h-100 d-flex align-items-center\">\r\n                    <input ref={textRef} type=\"text\" className=\"w-100\" id=\"message-input\" placeholder=\"Escribe un mensaje\" autoComplete=\"off\"/>\r\n                    <button type=\"submit\" id=\"message-submit\" className=\"d-flex align-items-center\"><IoMdSend color=\"#fff\" size=\"18px\"/></button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        <ModalInfo handleClose={handleClose} show={show}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nChat.propType = {\r\n    sendMessage: PropTypes.func.isRequired\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { motion } from 'framer-motion';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { FaUserCircle } from 'react-icons/fa';\r\nimport { AiOutlineMenu } from 'react-icons/ai';\r\nimport { IoIosInformationCircle, IoMdSend } from 'react-icons/io';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\nimport { addChatMessages, openSidebar } from '../../actions/dashboard';\r\nimport { MessageReceived } from '../dashboard/MessageReceived';\r\nimport { MessageSent } from '../dashboard/MessageSent';\r\nimport { ModalInfo } from './ModalInfo';\r\n\r\nexport const PrivateChat = ({ sendPrivateMessage, showMenuButton }) => {\r\n\r\n    const textRef = useRef();\r\n    const [show, setShow] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const { selectedUser } = useSelector(state => state.dashboard);\r\n    const { chatMessages } = useSelector(state => state.dashboard);\r\n    const { uid, name } = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const setRef = useCallback( node => {\r\n        if( node ) {\r\n            node.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(textRef.current.value === ''){\r\n            textRef.current.value = '';\r\n        } else {\r\n            sendPrivateMessage(textRef.current.value);\r\n            textRef.current.value = '';\r\n        }\r\n    }\r\n\r\n    const handleOpen = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    useEffect(() => {\r\n        //Solo si hay un usuario (chat) seleccionado\r\n        if(selectedUser?.uid) {\r\n            setLoading(true)\r\n            axios.get(`${process.env.REACT_APP_API_URL}/messages/get-all-chat/${uid}/${selectedUser?.uid}`, {\r\n                headers: {\r\n                    'x-token': localStorage.getItem('chat-token'),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then( ( {data} ) => {\r\n                setLoading(false)\r\n                dispatch( addChatMessages(data.messagesChat) )\r\n            }) \r\n            .catch( err => {\r\n                Swal.fire('UPS, hubo un error cargando el chat');\r\n            })\r\n        }\r\n    }, [selectedUser?.uid, selectedUser?.name, uid, dispatch]); \r\n\r\n    return (\r\n        <>\r\n        <div className=\"chat w-100\">\r\n            <div className=\"py-2 d-flex align-items-center justify-content-between bg-head-chat\">\r\n                <div>\r\n                    <span className=\"text-white fw-bold ms-3 text-resp\">\r\n                        <FaUserCircle color=\"#fff\" size=\"26px\" className=\"mr-10\"/>\r\n                        {selectedUser.name}</span>\r\n                </div>\r\n                <div>\r\n                    <motion.button \r\n                        onClick={handleOpen}\r\n                        whileTap={ {scale: 2.5} }\r\n                        className=\"button-info mr-1rem\"\r\n                    >\r\n                        <IoIosInformationCircle />\r\n                    </motion.button>\r\n                    {showMenuButton && \r\n                    <motion.button\r\n                            onClick={() => dispatch( openSidebar() )}\r\n                            whileTap={ {scale: 2.5} }\r\n                            className=\"button-info mr-1rem\"\r\n                        >\r\n                        <AiOutlineMenu />\r\n                    </motion.button>\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n            <div className=\"overflow-auto pt-4 bg-chat chat-container\">\r\n            \r\n            {(loading) &&\r\n                <div className=\"w-100 d-flex justify-content-center\">\r\n                    <Spinner animation=\"border\" role=\"status\" variant=\"primary\" />\r\n                </div>\r\n            }\r\n            {(chatMessages && !loading && chatMessages.length === 0) &&\r\n                <div className=\"alert alert-warning text-center text-resp mx-alert\">\r\n                    Aún no tienes mensajes con <strong>{selectedUser?.name}.</strong>\r\n                </div>\r\n            }\r\n            {chatMessages &&\r\n                    chatMessages.map((message, index) => {\r\n                        const lastMessage = chatMessages.length - 1 === index;\r\n                        if(message.recipient !== uid){\r\n                            return <div key={index} className=\"d-flex w-100 align-items-end flex-column\" ref={lastMessage ? setRef : null}>\r\n                                <MessageSent \r\n                                    key={index} \r\n                                    text={message.message}\r\n                                    date={message.date}\r\n                                />\r\n                            </div>\r\n                        } else {\r\n                            return <div key={index} className=\"d-flex w-100 align-items-start flex-column\" ref={lastMessage ? setRef : null}>\r\n                                <MessageReceived \r\n                                    key={index} \r\n                                    text={message.message} \r\n                                    date={message.date}\r\n                                />\r\n                            </div>\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n           \r\n            <div id=\"chat-input\">\r\n                <form onSubmit={handleSubmit} className=\"h-100 d-flex align-items-center\">\r\n                    <input ref={textRef} type=\"text\" className=\"w-100\" id=\"message-input\" placeholder=\"Escribe un mensaje\" autoComplete=\"off\"/>\r\n                    <button type=\"submit\" id=\"message-submit\" className=\"bg-primary\">\r\n                        <IoMdSend color=\"#fff\"/>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        <ModalInfo \r\n            handleClose={handleClose} \r\n            show={show}\r\n            participants={[name, selectedUser?.name]}\r\n        />\r\n        </>\r\n    )\r\n}\r\n","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport moment from 'moment'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { io } from 'socket.io-client';\r\nimport { addChatMessages, addMessages, addUsers, addAllUsers } from '../actions/dashboard';\r\nimport { setStats } from '../actions/stats';\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n    return useContext(SocketContext)\r\n}\r\n\r\nexport const SocketProvider = ( {children} ) => {\r\n\r\n    const [socket, setSocket] = useState();\r\n    const { uid, name } = useSelector(state => state.auth);\r\n    const { selectedUser } = useSelector(state => state.dashboard);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const sendMessage = useCallback(( message ) => {\r\n       const now = new Date();\r\n       const date = moment(now).format('LT');\r\n\r\n        socket.emit('send-message',{message, user: uid, date})\r\n    }, [socket, uid]);\r\n\r\n    const sendPrivateMessage = useCallback(( message ) => {\r\n        const now = new Date();\r\n        const date = moment(now).format('LT');\r\n\r\n        socket.emit('send-private-message', [{message, date}, {uid: selectedUser.uid, name: selectedUser.name}]);\r\n    }, [selectedUser?.uid, selectedUser?.name, socket]);\r\n\r\n    useEffect(() => {\r\n\r\n        const newSocket = io(process.env.REACT_APP_URL, {\r\n        query: { uid, name }\r\n        })\r\n        setSocket(newSocket)\r\n  \r\n        return () => newSocket.close();\r\n    }, [uid, name]);\r\n\r\n    useEffect(() => {\r\n        if(!socket) return;\r\n        socket.on('receive-messages', (payload) => {\r\n            dispatch( addMessages(payload) )\r\n        })\r\n\r\n        return () => socket.off('receive-messages')\r\n    }, [socket, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(!socket) return;\r\n\r\n        socket.on('created-message', (payload) => {\r\n            dispatch( addMessages(payload) )\r\n        })\r\n\r\n        return () => socket.off('created-message')\r\n    }, [socket, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(!socket) return;\r\n\r\n        socket.on('active-users', (payload) => {\r\n            dispatch( addUsers(payload) );\r\n        })\r\n\r\n        return () => socket.off('active-users')\r\n    }, [socket, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(!socket) return;\r\n\r\n        socket.on('private-messages', (payload) => {\r\n            dispatch( addChatMessages(payload) )\r\n        })\r\n\r\n        return () => socket.off('private-messages')\r\n    }, [socket, dispatch]);\r\n\r\n    useEffect(() => {\r\n       if(!socket) return;\r\n\r\n       socket.on('registered-users', (payload) => {\r\n            dispatch( addAllUsers(payload) )\r\n       })\r\n       return () => socket.off('registered-users')\r\n    }, [socket, dispatch])\r\n\r\n  \r\n      useEffect(() => {\r\n        if(!socket) return;\r\n  \r\n        socket.on('get-stats', (payload) => {\r\n            dispatch( setStats(payload) )\r\n        })\r\n  \r\n        return () => socket.off('get-stats')\r\n    }, [socket, dispatch]); \r\n\r\n\r\n    const values = {\r\n        sendMessage,\r\n        sendPrivateMessage\r\n    }\r\n\r\n    return (\r\n        <SocketContext.Provider value={values}>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Aside } from './Aside';\r\nimport { AsideResponsive } from './AsideResponsive';\r\nimport { Chat } from './Chat';\r\nimport { addMessages, selectUser } from '../../actions/dashboard';\r\nimport { PrivateChat } from './PrivateChat';\r\nimport { useSocket } from '../../context/SocketProvider';\r\nimport axios from 'axios';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\nexport const DashboardScreen = () => {\r\n\r\n    const { name } = useSelector(state => state.auth);\r\n    const [width, setWidth] = useState(window.screen.width);\r\n    const { selectedUser, messages, showSidebar } = useSelector(state => state.dashboard);\r\n    const {sendMessage, sendPrivateMessage} = useSocket();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n       if(messages.length === 0) {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/messages/get-all`, {\r\n            headers: {\r\n                'x-token': localStorage.getItem('chat-token'),\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then( ( {data} ) => dispatch( addMessages(data.messages) ))\r\n       }\r\n\r\n    }, [dispatch, messages]);\r\n\r\n    useEffect(() => {\r\n\r\n        const windowResize = (e) => {\r\n            setWidth(e.target.innerWidth)\r\n        }\r\n        \r\n        window.addEventListener('resize', windowResize )\r\n\r\n        return () => window.removeEventListener('resize', windowResize)\r\n\r\n    }, [])\r\n    \r\n    return (  \r\n        <>\r\n            <Helmet>\r\n                <title>{ name } | ChatRoom</title>\r\n                <meta name=\"description\" content=\"Contenido principal del usuario y salas de chat\" />\r\n            </Helmet>\r\n            \r\n            <div id=\"container-grid\">\r\n\r\n                {width > 900 &&\r\n                <div className=\"p-0 aside-color\">\r\n                     <Aside /> \r\n                </div>\r\n                }\r\n\r\n                {width <= 900 &&\r\n                <div className={`p-0 aside-color aside-responsive ${showSidebar && 'aside-responsive-show'}`}>\r\n                    <AsideResponsive />\r\n                </div>\r\n                }\r\n\r\n\r\n                <div className=\"p-0 d-flex\">\r\n                    <div className=\"d-flex column-chat-dimensions\" id=\"chat\">\r\n                        {selectedUser?.uid && selectUser?.name \r\n                        ? <PrivateChat \r\n                            sendPrivateMessage={sendPrivateMessage} \r\n                            showMenuButton={ width < 900 ? true : false } \r\n                        />\r\n                        : <Chat \r\n                            sendMessage={sendMessage} \r\n                            showMenuButton={ width < 900 ? true : false }\r\n                        />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Col, Container, Row } from 'react-bootstrap'\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { BsFillCaretLeftFill } from 'react-icons/bs';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nexport const StatisticsScreen = () => {\r\n\r\n    const {countMessages} = useSelector(state => state.stats)\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Stats | ChatRoom</title>\r\n                <meta name=\"description\" content=\"Estadisticas del chat general\" />\r\n            </Helmet>\r\n\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={12} className=\"p-0 bg-chat\">\r\n                        <div className=\"container-full\">\r\n                            <div className=\"px-3 py-2 bg-head-chat\">\r\n                                <Link to=\"/\" className=\"btn btn-outline-info fw-bold d-flex align-items-center d-inline-flex\">\r\n                                <BsFillCaretLeftFill />Inicio\r\n                                </Link>\r\n                            </div>\r\n                            <h3 className=\"text-white text-center mt-5\">Usuarios que más mensajes han enviado</h3>\r\n                            <h4 className=\"text-info text-center\">En el chat general</h4>\r\n                            <ResponsiveContainer width=\"100%\" height=\"60%\" className=\"mt-5\">\r\n                                <BarChart\r\n                                    width={500}\r\n                                    height={300}\r\n                                    data={countMessages}\r\n                                    margin={{\r\n                                        top: 5,\r\n                                        right: 30,\r\n                                        left: 20,\r\n                                        bottom: 5,\r\n                                    }}\r\n                                >\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"name\" />\r\n                                    <YAxis />\r\n                                    <Tooltip />\r\n                                    <Legend />\r\n                                    <Bar dataKey=\"messages\" fill=\"#8884d8\" />\r\n                                </BarChart>\r\n                            </ResponsiveContainer>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Button, Container, Form } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Helmet} from \"react-helmet\";\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { startLogin } from '../../actions/auth';\r\n\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n     //Validación del formulario\r\n     const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                    .email( true )\r\n                    .required( true ),\r\n            password: Yup.string()\r\n                    .required( true )\r\n                    .min(8, true)\r\n        }),\r\n        onSubmit : (values) => {\r\n\r\n            const { email, password } = values;\r\n           \r\n            dispatch( startLogin(email, password) );\r\n        }   \r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>Chat | Login</title>\r\n                <meta name=\"description\" content=\"Inicio de sesión\" />\r\n            </Helmet>\r\n\r\n            <Container fluid className=\"bg-dark d-flex justify-content-center align-items-center container-full\">\r\n                <div className=\"form\">\r\n                    <Form onSubmit={formik.handleSubmit} className=\"animate__animated animate__fadeIn\">\r\n                        <h2 className=\"text-white text-start mb-3 texto\">ChatRoom</h2>\r\n                        <h4 className=\"text-white lead\">Inicio de sesión</h4>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Control \r\n                                autoComplete=\"off\"\r\n                                name=\"email\"\r\n                                className=\"bg-dark text-white\" \r\n                                type=\"email\" \r\n                                placeholder=\"Correo\" \r\n                                value={ formik.values.email }\r\n                                onChange={ formik.handleChange }\r\n                                onBlur={ formik.handleBlur }\r\n                                isInvalid={ formik.errors.email }\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Control \r\n                                name=\"password\"\r\n                                className=\"bg-dark text-white\" \r\n                                type=\"password\" \r\n                                placeholder=\"Contraseña\" \r\n                                value={ formik.values.password }\r\n                                onChange={ formik.handleChange }\r\n                                onBlur={ formik.handleBlur }\r\n                                isInvalid={ formik.errors.password }\r\n                            />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" variant=\"outline-primary\" className=\"w-100 mt-3\">\r\n                            Ingresar\r\n                        </Button>\r\n                        <Link to=\"/auth/register\" className=\"d-inline-block mt-3\">Si no tienes una cuenta</Link>\r\n                    </Form>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Button, Container, Form } from 'react-bootstrap';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { startRegister } from '../../actions/auth';\r\n\r\nexport const RegisterScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n     //Validación del formulario\r\n     const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n                    .required( true )\r\n                    .min(3, true),\r\n            email: Yup.string()\r\n                    .email( true )\r\n                    .required( true ),\r\n            password: Yup.string()\r\n                    .required( true )\r\n                    .min(8, true)\r\n        }),\r\n        onSubmit : (values) => {\r\n\r\n            const { name, email, password } = values;\r\n           \r\n            dispatch( startRegister(name, email, password) );\r\n        }   \r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>Chat | Register</title>\r\n                <meta name=\"description\" content=\"Registro de nuevo usuario\" />\r\n            </Helmet>\r\n\r\n            <Container fluid className=\"bg-dark d-flex flex-column justify-content-center align-items-center container-full\">\r\n                \r\n                <div className=\"form\">\r\n                    <Form onSubmit={formik.handleSubmit} className=\"animate__animated animate__fadeIn\">\r\n                        <h2 className=\"text-white text-start mb-3 texto\">ChatRoom</h2>\r\n                        <h4 className=\"text-white lead mt-3\">Registro</h4>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Control \r\n                                    autoComplete=\"off\"\r\n                                    name=\"name\"\r\n                                    className=\"bg-dark text-white\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Nombre\" \r\n                                    value={ formik.values.name }\r\n                                    onChange={ formik.handleChange }\r\n                                    onBlur={ formik.handleBlur }\r\n                                    isInvalid={formik.errors.name}\r\n                                />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Control \r\n                                    autoComplete=\"off\"\r\n                                    name=\"email\"\r\n                                    className=\"bg-dark text-white\" \r\n                                    type=\"email\" \r\n                                    placeholder=\"Correo\"  \r\n                                    value={ formik.values.email }\r\n                                    onChange={ formik.handleChange }\r\n                                    onBlur={ formik.handleBlur }\r\n                                    isInvalid={formik.errors.email}\r\n                                />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Control \r\n                                    name=\"password\"\r\n                                    className=\"bg-dark text-white\" \r\n                                    type=\"password\" \r\n                                    placeholder=\"Contraseña\" \r\n                                    value={ formik.values.password }\r\n                                    onChange={ formik.handleChange }\r\n                                    onBlur={ formik.handleBlur }\r\n                                    isInvalid={formik.errors.password}\r\n                                />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" variant=\"outline-primary\" className=\"w-100 mt-3\">\r\n                            Registrarme\r\n                        </Button>\r\n                        <Link to=\"/auth/login\" className=\"d-inline-block mt-3\">Si ya tienes una cuenta</Link>\r\n                    </Form>\r\n                </div>\r\n            </Container>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect,} from \"react-router-dom\";\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\r\n\r\n\r\nexport const AuthRouter = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n\r\n                <Route \r\n                    path=\"/auth/login\"\r\n                    component={LoginScreen}\r\n                />\r\n\r\n                <Route \r\n                    path=\"/auth/register\"\r\n                    component={RegisterScreen}\r\n                />\r\n\r\n                <Redirect to=\"/auth/login\" />\r\n\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component : Component,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <Route {...rest}\r\n            component={ (props) => (\r\n                ( isAuthenticated )\r\n                    ? ( <Component { ...props } /> )\r\n                    : ( <Redirect to=\"/login\" /> )\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component : Component,\r\n    ...rest\r\n}) => {\r\n\r\n\r\n\r\n    return (\r\n        <Route {...rest}\r\n            component={ (props) => (\r\n                ( isAuthenticated )\r\n                    ? ( <Redirect to=\"/\" /> )\r\n                    : ( <Component { ...props } /> )\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\";\r\nimport { startChecking } from '../actions/auth';\r\n\r\nimport { DashboardScreen } from '../components/dashboard/DashboardScreen';\r\nimport { StatisticsScreen } from '../components/statistics/StatisticsScreen';\r\nimport { SocketProvider } from '../context/SocketProvider';\r\nimport { AuthRouter } from './AuthRouter';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { checking, uid } = useSelector(state => state.auth);\r\n\r\n    //se verifica el token cada vez que se renderiza de nuevo el AppRouter\r\n    useEffect(() => {\r\n        \r\n        dispatch( startChecking() );\r\n\r\n    }, [dispatch]);\r\n\r\n    if( checking ) {\r\n        return(\r\n            <div className=\"flexible\">\r\n                <div className=\"sk-chase\">\r\n                    <div className=\"sk-chase-dot\"></div>\r\n                    <div className=\"sk-chase-dot\"></div>\r\n                    <div className=\"sk-chase-dot\"></div>\r\n                    <div className=\"sk-chase-dot\"></div>\r\n                    <div className=\"sk-chase-dot\"></div>\r\n                    <div className=\"sk-chase-dot\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <SocketProvider>\r\n             <Router>\r\n                <Switch>\r\n\r\n                    <PublicRoute \r\n                        isAuthenticated={!!uid}\r\n                        path=\"/auth\"\r\n                        component={ AuthRouter }\r\n                    />\r\n\r\n                    <PrivateRoute \r\n                        isAuthenticated={!!uid}\r\n                        exact\r\n                        path=\"/\" \r\n                        component={ DashboardScreen }\r\n                    />\r\n\r\n                    <PrivateRoute\r\n                        isAuthenticated={!!uid}\r\n                        path=\"/stats\"\r\n                        component={ StatisticsScreen }\r\n                    />\r\n\r\n                    <Redirect to=\"/auth/login\" />\r\n\r\n                </Switch>\r\n            </Router>\r\n        </SocketProvider>\r\n    )\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking: true,\r\n}\r\n\r\nexport const authReducer = (state= initialState, action) => {\r\n    switch (action.type) {\r\n        case types.authLogin:\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n                ...action.payload\r\n            }    \r\n\r\n        case types.authLogout:\r\n            return {\r\n                checking: false\r\n            }\r\n            \r\n        case types.authCheckingJWTFinish:\r\n            return {\r\n                ...state,\r\n                checking: false\r\n            }\r\n        case types.newUser: \r\n            return {\r\n                ...state,\r\n                newUser: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    messages: [],\r\n    users: [],\r\n    selectedUser: {},\r\n    chatMessages: [],\r\n    allUsers: [],\r\n}\r\n\r\nexport const dashboardReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case types.addMessages:\r\n            return {\r\n                ...state,\r\n                messages: action.payload\r\n            }\r\n        case types.addUsers:\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            }\r\n        case types.cleanDashboard: \r\n            return {\r\n                messages: [],\r\n                users: []\r\n            }\r\n        case types.selectUser: \r\n            return {\r\n                ...state,\r\n                selectedUser: action.payload\r\n            }\r\n        case types.addChatMessages: \r\n            return {\r\n                ...state,\r\n                chatMessages: action.payload\r\n            }\r\n        case types.addAllUsers: \r\n            return {\r\n                ...state,\r\n                allUsers: action.payload\r\n            }\r\n        case types.openSidebar: \r\n            return {\r\n                ...state,\r\n                showSidebar: true\r\n            }\r\n        case types.closeSidebar: \r\n            return {\r\n                ...state,\r\n                showSidebar: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    countMessages: []\r\n}\r\n\r\nexport const statsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case types.loadStats:\r\n            return {\r\n                ...state,\r\n                countMessages: action.payload\r\n            }\r\n        case types.cleanStats:\r\n            return {\r\n                countMessages: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { authReducer } from '../reducers/authReducer';\r\nimport { dashboardReducer } from '../reducers/dashboardReducer';\r\nimport { statsReducer } from '../reducers/statsReducer';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    dashboard: dashboardReducer,\r\n    stats: statsReducer\r\n})\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers( applyMiddleware(thunk) )\r\n)","import { AppRouter } from './router/AppRouter';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport './css/app.css';\nimport 'animate.css';\n\nfunction App() {\n\n  return(\n    <Provider store={ store }>\n      <AppRouter />    \n    </Provider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/js/dist/dropdown';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}